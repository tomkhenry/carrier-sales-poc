#!/bin/bash

#######################################
# Update Carrier Sales API on EC2
# Pushes new image and restarts container
#######################################

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
AWS_REGION="${AWS_REGION:-us-east-1}"
KEY_NAME="${KEY_NAME:-carrier-api-key}"
APP_NAME="carrier-sales-api"

echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Update EC2 Deployment${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""

# Check prerequisites
echo -e "${YELLOW}Checking prerequisites...${NC}"

if ! command -v aws &> /dev/null; then
    echo -e "${RED}Error: AWS CLI is not installed${NC}"
    exit 1
fi

if ! command -v docker &> /dev/null; then
    echo -e "${RED}Error: Docker is not installed${NC}"
    exit 1
fi

if ! aws sts get-caller-identity &> /dev/null; then
    echo -e "${RED}Error: AWS credentials not configured${NC}"
    exit 1
fi

AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
ECR_REPOSITORY="${APP_NAME}"
IMAGE_TAG="latest"

echo -e "${GREEN}✓ Prerequisites check passed${NC}"
echo ""

# Get EC2 instance
echo -e "${YELLOW}Finding EC2 instance...${NC}"

if [ -n "$EC2_HOST" ]; then
    PUBLIC_IP="$EC2_HOST"
    echo "Using provided EC2_HOST: ${PUBLIC_IP}"
else
    INSTANCE_ID=$(aws ec2 describe-instances \
        --region ${AWS_REGION} \
        --filters "Name=tag:Application,Values=carrier-sales-api" \
                  "Name=instance-state-name,Values=running" \
        --query 'Reservations[0].Instances[0].InstanceId' \
        --output text 2>/dev/null)
    
    if [ "$INSTANCE_ID" = "None" ] || [ -z "$INSTANCE_ID" ]; then
        echo -e "${RED}Error: No running EC2 instance found${NC}"
        echo "Set EC2_HOST or ensure instance is tagged with 'Application=carrier-sales-api'"
        exit 1
    fi
    
    PUBLIC_IP=$(aws ec2 describe-instances \
        --instance-ids ${INSTANCE_ID} \
        --region ${AWS_REGION} \
        --query 'Reservations[0].Instances[0].PublicIpAddress' \
        --output text)
    
    echo -e "${GREEN}✓ Found instance: ${INSTANCE_ID} (${PUBLIC_IP})${NC}"
fi
echo ""

# Check SSH key
if [ -z "$KEY_PATH" ]; then
    if [ -f "${KEY_NAME}.pem" ]; then
        KEY_PATH="${KEY_NAME}.pem"
    elif [ -f "$HOME/.ssh/${KEY_NAME}.pem" ]; then
        KEY_PATH="$HOME/.ssh/${KEY_NAME}.pem"
    else
        echo -e "${RED}Error: SSH key not found${NC}"
        echo "Set KEY_PATH environment variable"
        exit 1
    fi
fi

if [ ! -f "$KEY_PATH" ]; then
    echo -e "${RED}Error: SSH key file not found: ${KEY_PATH}${NC}"
    exit 1
fi

# Step 1: Build Docker image for AMD64 (EC2 architecture)
echo -e "${YELLOW}Step 1: Building Docker image for linux/amd64...${NC}"
docker build --platform linux/amd64 -t ${APP_NAME}:${IMAGE_TAG} .
echo -e "${GREEN}✓ Docker image built${NC}"
echo ""

# Step 2: Push to ECR
echo -e "${YELLOW}Step 2: Pushing image to ECR...${NC}"
echo "Logging in to ECR..."
aws ecr get-login-password --region ${AWS_REGION} | \
    docker login --username AWS --password-stdin ${ECR_REGISTRY}

echo "Tagging image..."
docker tag ${APP_NAME}:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

echo "Pushing image..."
docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
echo -e "${GREEN}✓ Image pushed to ECR${NC}"
echo ""

# Step 3: Update container on EC2
echo -e "${YELLOW}Step 3: Updating container on EC2...${NC}"

# Execute update on EC2
ssh -i "$KEY_PATH" \
    -o StrictHostKeyChecking=no \
    -o UserKnownHostsFile=/dev/null \
    -o LogLevel=ERROR \
    ec2-user@${PUBLIC_IP} << 'ENDSSH'
set -e

AWS_REGION="${AWS_REGION:-us-east-1}"
APP_NAME="carrier-sales-api"

# Get account ID and ECR details
AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text 2>/dev/null || echo "")
if [ -z "$AWS_ACCOUNT_ID" ]; then
    echo "Using IMDSv2 to get region..."
    TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" -s)
    AWS_REGION=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/placement/region)
    AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text --region ${AWS_REGION})
fi

ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
ECR_REPOSITORY="${APP_NAME}"

echo "Logging into ECR..."
aws ecr get-login-password --region ${AWS_REGION} | \
    docker login --username AWS --password-stdin ${ECR_REGISTRY}

echo "Pulling latest image..."
docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest

echo "Stopping old container..."
docker stop ${APP_NAME} 2>/dev/null || true
docker rm ${APP_NAME} 2>/dev/null || true

echo "Starting new container..."
# TODO: Update these environment variables with your actual values
docker run -d \
  --name ${APP_NAME} \
  --restart unless-stopped \
  -p 3000:3000 \
  -e NODE_ENV=production \
  -e PORT=3000 \
  -e LOG_LEVEL=info \
  -e FMCSA_API_KEY=YOUR_FMCSA_API_KEY_HERE \
  -e FMCSA_API_BASE_URL=https://mobile.fmcsa.dot.gov/qc/services/carriers \
  -e FMCSA_API_TIMEOUT=10000 \
  -e CARRIER_CACHE_TTL=86400 \
  ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest

echo "Waiting for container to start..."
sleep 3

if docker ps | grep -q ${APP_NAME}; then
    echo "✓ Container is running"
else
    echo "✗ Container failed to start"
    docker logs ${APP_NAME}
    exit 1
fi

ENDSSH

echo -e "${GREEN}✓ Container updated and restarted${NC}"
echo ""

# Step 4: Verify deployment
echo -e "${YELLOW}Step 4: Verifying deployment...${NC}"
sleep 2

if curl -s -f "http://${PUBLIC_IP}:3000/health" > /dev/null; then
    echo -e "${GREEN}✓ API is responding${NC}"
else
    echo -e "${YELLOW}⚠ API health check failed (might still be starting)${NC}"
fi
echo ""

# Summary
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Update Complete!${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""
echo "EC2 Instance: ${PUBLIC_IP}"
echo "API URL: http://${PUBLIC_IP}:3000"
echo ""
echo "Test the deployment:"
echo "  curl http://${PUBLIC_IP}:3000/health"
echo ""
echo "View logs:"
echo "  ssh -i ${KEY_PATH} ec2-user@${PUBLIC_IP} 'docker logs -f ${APP_NAME}'"
echo ""

